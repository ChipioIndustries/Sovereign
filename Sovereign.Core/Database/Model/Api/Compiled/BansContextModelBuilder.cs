// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Sovereign.Core.Database.Model.Api.Compiled
{
    public partial class BansContextModel
    {
        partial void Initialize()
        {
            var banEntry = BanEntryEntityType.Create(this);
            var externalAccountLink = ExternalAccountLinkEntityType.Create(this);

            BanEntryEntityType.CreateAnnotations(banEntry);
            ExternalAccountLinkEntityType.CreateAnnotations(externalAccountLink);

            AddAnnotation("ProductVersion", "8.0.8");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var banEntry = FindEntityType("Sovereign.Core.Database.Model.Api.BanEntry")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            banEntry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var sovereignCoreDatabaseModelApiBanEntryTableBase = new TableBase("Sovereign.Core.Database.Model.Api.BanEntry", null, relationalModel);
            var actingRobloxUserIdColumnBase = new ColumnBase<ColumnMappingBase>("ActingRobloxUserId", "INTEGER", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("ActingRobloxUserId", actingRobloxUserIdColumnBase);
            var actionColumnBase = new ColumnBase<ColumnMappingBase>("Action", "INTEGER", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("Action", actionColumnBase);
            var displayReasonColumnBase = new ColumnBase<ColumnMappingBase>("DisplayReason", "TEXT", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("DisplayReason", displayReasonColumnBase);
            var domainColumnBase = new ColumnBase<ColumnMappingBase>("Domain", "TEXT", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("Domain", domainColumnBase);
            var endTimeColumnBase = new ColumnBase<ColumnMappingBase>("EndTime", "TEXT", sovereignCoreDatabaseModelApiBanEntryTableBase)
            {
                IsNullable = true
            };
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("EndTime", endTimeColumnBase);
            var excludeAltAccountsColumnBase = new ColumnBase<ColumnMappingBase>("ExcludeAltAccounts", "INTEGER", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("ExcludeAltAccounts", excludeAltAccountsColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("Id", idColumnBase);
            var privateReasonColumnBase = new ColumnBase<ColumnMappingBase>("PrivateReason", "TEXT", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("PrivateReason", privateReasonColumnBase);
            var startTimeColumnBase = new ColumnBase<ColumnMappingBase>("StartTime", "TEXT", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("StartTime", startTimeColumnBase);
            var targetRobloxUserIdColumnBase = new ColumnBase<ColumnMappingBase>("TargetRobloxUserId", "INTEGER", sovereignCoreDatabaseModelApiBanEntryTableBase);
            sovereignCoreDatabaseModelApiBanEntryTableBase.Columns.Add("TargetRobloxUserId", targetRobloxUserIdColumnBase);
            relationalModel.DefaultTables.Add("Sovereign.Core.Database.Model.Api.BanEntry", sovereignCoreDatabaseModelApiBanEntryTableBase);
            var sovereignCoreDatabaseModelApiBanEntryMappingBase = new TableMappingBase<ColumnMappingBase>(banEntry, sovereignCoreDatabaseModelApiBanEntryTableBase, true);
            sovereignCoreDatabaseModelApiBanEntryTableBase.AddTypeMapping(sovereignCoreDatabaseModelApiBanEntryMappingBase, false);
            defaultTableMappings.Add(sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, banEntry.FindProperty("Id")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actingRobloxUserIdColumnBase, banEntry.FindProperty("ActingRobloxUserId")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actionColumnBase, banEntry.FindProperty("Action")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayReasonColumnBase, banEntry.FindProperty("DisplayReason")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)domainColumnBase, banEntry.FindProperty("Domain")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endTimeColumnBase, banEntry.FindProperty("EndTime")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)excludeAltAccountsColumnBase, banEntry.FindProperty("ExcludeAltAccounts")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)privateReasonColumnBase, banEntry.FindProperty("PrivateReason")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startTimeColumnBase, banEntry.FindProperty("StartTime")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetRobloxUserIdColumnBase, banEntry.FindProperty("TargetRobloxUserId")!, sovereignCoreDatabaseModelApiBanEntryMappingBase);

            var tableMappings = new List<TableMapping>();
            banEntry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var banEntriesTable = new Table("BanEntries", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", banEntriesTable);
            banEntriesTable.Columns.Add("Id", idColumn);
            var actingRobloxUserIdColumn = new Column("ActingRobloxUserId", "INTEGER", banEntriesTable);
            banEntriesTable.Columns.Add("ActingRobloxUserId", actingRobloxUserIdColumn);
            var actionColumn = new Column("Action", "INTEGER", banEntriesTable);
            banEntriesTable.Columns.Add("Action", actionColumn);
            var displayReasonColumn = new Column("DisplayReason", "TEXT", banEntriesTable);
            banEntriesTable.Columns.Add("DisplayReason", displayReasonColumn);
            var domainColumn = new Column("Domain", "TEXT", banEntriesTable);
            banEntriesTable.Columns.Add("Domain", domainColumn);
            var endTimeColumn = new Column("EndTime", "TEXT", banEntriesTable)
            {
                IsNullable = true
            };
            banEntriesTable.Columns.Add("EndTime", endTimeColumn);
            var excludeAltAccountsColumn = new Column("ExcludeAltAccounts", "INTEGER", banEntriesTable);
            banEntriesTable.Columns.Add("ExcludeAltAccounts", excludeAltAccountsColumn);
            var privateReasonColumn = new Column("PrivateReason", "TEXT", banEntriesTable);
            banEntriesTable.Columns.Add("PrivateReason", privateReasonColumn);
            var startTimeColumn = new Column("StartTime", "TEXT", banEntriesTable);
            banEntriesTable.Columns.Add("StartTime", startTimeColumn);
            var targetRobloxUserIdColumn = new Column("TargetRobloxUserId", "INTEGER", banEntriesTable);
            banEntriesTable.Columns.Add("TargetRobloxUserId", targetRobloxUserIdColumn);
            var pK_BanEntries = new UniqueConstraint("PK_BanEntries", banEntriesTable, new[] { idColumn });
            banEntriesTable.PrimaryKey = pK_BanEntries;
            var pK_BanEntriesUc = RelationalModel.GetKey(this,
                "Sovereign.Core.Database.Model.Api.BanEntry",
                new[] { "Id" });
            pK_BanEntries.MappedKeys.Add(pK_BanEntriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BanEntriesUc).Add(pK_BanEntries);
            banEntriesTable.UniqueConstraints.Add("PK_BanEntries", pK_BanEntries);
            relationalModel.Tables.Add(("BanEntries", null), banEntriesTable);
            var banEntriesTableMapping = new TableMapping(banEntry, banEntriesTable, true);
            banEntriesTable.AddTypeMapping(banEntriesTableMapping, false);
            tableMappings.Add(banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, banEntry.FindProperty("Id")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(actingRobloxUserIdColumn, banEntry.FindProperty("ActingRobloxUserId")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(actionColumn, banEntry.FindProperty("Action")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(displayReasonColumn, banEntry.FindProperty("DisplayReason")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(domainColumn, banEntry.FindProperty("Domain")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(endTimeColumn, banEntry.FindProperty("EndTime")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(excludeAltAccountsColumn, banEntry.FindProperty("ExcludeAltAccounts")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(privateReasonColumn, banEntry.FindProperty("PrivateReason")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(startTimeColumn, banEntry.FindProperty("StartTime")!, banEntriesTableMapping);
            RelationalModel.CreateColumnMapping(targetRobloxUserIdColumn, banEntry.FindProperty("TargetRobloxUserId")!, banEntriesTableMapping);

            var externalAccountLink = FindEntityType("Sovereign.Core.Database.Model.Api.ExternalAccountLink")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            externalAccountLink.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var sovereignCoreDatabaseModelApiExternalAccountLinkTableBase = new TableBase("Sovereign.Core.Database.Model.Api.ExternalAccountLink", null, relationalModel);
            var domainColumnBase0 = new ColumnBase<ColumnMappingBase>("Domain", "TEXT", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.Columns.Add("Domain", domainColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.Columns.Add("Id", idColumnBase0);
            var linkDataColumnBase = new ColumnBase<ColumnMappingBase>("LinkData", "TEXT", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.Columns.Add("LinkData", linkDataColumnBase);
            var linkMethodColumnBase = new ColumnBase<ColumnMappingBase>("LinkMethod", "TEXT", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.Columns.Add("LinkMethod", linkMethodColumnBase);
            var robloxUserIdColumnBase = new ColumnBase<ColumnMappingBase>("RobloxUserId", "INTEGER", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.Columns.Add("RobloxUserId", robloxUserIdColumnBase);
            relationalModel.DefaultTables.Add("Sovereign.Core.Database.Model.Api.ExternalAccountLink", sovereignCoreDatabaseModelApiExternalAccountLinkTableBase);
            var sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase = new TableMappingBase<ColumnMappingBase>(externalAccountLink, sovereignCoreDatabaseModelApiExternalAccountLinkTableBase, true);
            sovereignCoreDatabaseModelApiExternalAccountLinkTableBase.AddTypeMapping(sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase, false);
            defaultTableMappings0.Add(sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, externalAccountLink.FindProperty("Id")!, sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)domainColumnBase0, externalAccountLink.FindProperty("Domain")!, sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkDataColumnBase, externalAccountLink.FindProperty("LinkData")!, sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkMethodColumnBase, externalAccountLink.FindProperty("LinkMethod")!, sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)robloxUserIdColumnBase, externalAccountLink.FindProperty("RobloxUserId")!, sovereignCoreDatabaseModelApiExternalAccountLinkMappingBase);

            var tableMappings0 = new List<TableMapping>();
            externalAccountLink.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var externalAccountLinksTable = new Table("ExternalAccountLinks", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", externalAccountLinksTable);
            externalAccountLinksTable.Columns.Add("Id", idColumn0);
            var domainColumn0 = new Column("Domain", "TEXT", externalAccountLinksTable);
            externalAccountLinksTable.Columns.Add("Domain", domainColumn0);
            var linkDataColumn = new Column("LinkData", "TEXT", externalAccountLinksTable);
            externalAccountLinksTable.Columns.Add("LinkData", linkDataColumn);
            var linkMethodColumn = new Column("LinkMethod", "TEXT", externalAccountLinksTable);
            externalAccountLinksTable.Columns.Add("LinkMethod", linkMethodColumn);
            var robloxUserIdColumn = new Column("RobloxUserId", "INTEGER", externalAccountLinksTable);
            externalAccountLinksTable.Columns.Add("RobloxUserId", robloxUserIdColumn);
            var pK_ExternalAccountLinks = new UniqueConstraint("PK_ExternalAccountLinks", externalAccountLinksTable, new[] { idColumn0 });
            externalAccountLinksTable.PrimaryKey = pK_ExternalAccountLinks;
            var pK_ExternalAccountLinksUc = RelationalModel.GetKey(this,
                "Sovereign.Core.Database.Model.Api.ExternalAccountLink",
                new[] { "Id" });
            pK_ExternalAccountLinks.MappedKeys.Add(pK_ExternalAccountLinksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExternalAccountLinksUc).Add(pK_ExternalAccountLinks);
            externalAccountLinksTable.UniqueConstraints.Add("PK_ExternalAccountLinks", pK_ExternalAccountLinks);
            relationalModel.Tables.Add(("ExternalAccountLinks", null), externalAccountLinksTable);
            var externalAccountLinksTableMapping = new TableMapping(externalAccountLink, externalAccountLinksTable, true);
            externalAccountLinksTable.AddTypeMapping(externalAccountLinksTableMapping, false);
            tableMappings0.Add(externalAccountLinksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, externalAccountLink.FindProperty("Id")!, externalAccountLinksTableMapping);
            RelationalModel.CreateColumnMapping(domainColumn0, externalAccountLink.FindProperty("Domain")!, externalAccountLinksTableMapping);
            RelationalModel.CreateColumnMapping(linkDataColumn, externalAccountLink.FindProperty("LinkData")!, externalAccountLinksTableMapping);
            RelationalModel.CreateColumnMapping(linkMethodColumn, externalAccountLink.FindProperty("LinkMethod")!, externalAccountLinksTableMapping);
            RelationalModel.CreateColumnMapping(robloxUserIdColumn, externalAccountLink.FindProperty("RobloxUserId")!, externalAccountLinksTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
