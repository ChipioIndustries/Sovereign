// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sovereign.Core.Model;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Sovereign.Core.Database.Model.Api.Compiled
{
    internal partial class BanEntryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Sovereign.Core.Database.Model.Api.BanEntry",
                typeof(BanEntry),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(BanEntry).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var actingRobloxUserId = runtimeEntityType.AddProperty(
                "ActingRobloxUserId",
                typeof(long),
                propertyInfo: typeof(BanEntry).GetProperty("ActingRobloxUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<ActingRobloxUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            actingRobloxUserId.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var action = runtimeEntityType.AddProperty(
                "Action",
                typeof(BanAction),
                propertyInfo: typeof(BanEntry).GetProperty("Action", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<Action>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            action.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<BanAction>(
                    (BanAction v1, BanAction v2) => object.Equals((object)v1, (object)v2),
                    (BanAction v) => v.GetHashCode(),
                    (BanAction v) => v),
                keyComparer: new ValueComparer<BanAction>(
                    (BanAction v1, BanAction v2) => object.Equals((object)v1, (object)v2),
                    (BanAction v) => v.GetHashCode(),
                    (BanAction v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<BanAction, int>(
                    (BanAction value) => (int)value,
                    (int value) => (BanAction)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<BanAction, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<BanAction, int>(
                        (BanAction value) => (int)value,
                        (int value) => (BanAction)value)));
            action.SetSentinelFromProviderValue(0);

            var displayReason = runtimeEntityType.AddProperty(
                "DisplayReason",
                typeof(string),
                propertyInfo: typeof(BanEntry).GetProperty("DisplayReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<DisplayReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            displayReason.TypeMapping = SqliteStringTypeMapping.Default;

            var domain = runtimeEntityType.AddProperty(
                "Domain",
                typeof(string),
                propertyInfo: typeof(BanEntry).GetProperty("Domain", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<Domain>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            domain.TypeMapping = SqliteStringTypeMapping.Default;

            var endTime = runtimeEntityType.AddProperty(
                "EndTime",
                typeof(DateTime?),
                propertyInfo: typeof(BanEntry).GetProperty("EndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<EndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            endTime.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var excludeAltAccounts = runtimeEntityType.AddProperty(
                "ExcludeAltAccounts",
                typeof(bool),
                propertyInfo: typeof(BanEntry).GetProperty("ExcludeAltAccounts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<ExcludeAltAccounts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            excludeAltAccounts.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var privateReason = runtimeEntityType.AddProperty(
                "PrivateReason",
                typeof(string),
                propertyInfo: typeof(BanEntry).GetProperty("PrivateReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<PrivateReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            privateReason.TypeMapping = SqliteStringTypeMapping.Default;

            var startTime = runtimeEntityType.AddProperty(
                "StartTime",
                typeof(DateTime),
                propertyInfo: typeof(BanEntry).GetProperty("StartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<StartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            startTime.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var targetRobloxUserId = runtimeEntityType.AddProperty(
                "TargetRobloxUserId",
                typeof(long),
                propertyInfo: typeof(BanEntry).GetProperty("TargetRobloxUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BanEntry).GetField("<TargetRobloxUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            targetRobloxUserId.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "BanEntries");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
