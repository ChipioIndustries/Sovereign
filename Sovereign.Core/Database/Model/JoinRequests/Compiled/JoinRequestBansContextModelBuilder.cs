// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Sovereign.Core.Database.Model.JoinRequests.Compiled
{
    public partial class JoinRequestBansContextModel
    {
        partial void Initialize()
        {
            var joinRequestDeclineHistoryEntry = JoinRequestDeclineHistoryEntryEntityType.Create(this);

            JoinRequestDeclineHistoryEntryEntityType.CreateAnnotations(joinRequestDeclineHistoryEntry);

            AddAnnotation("ProductVersion", "8.0.8");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var joinRequestDeclineHistoryEntry = FindEntityType("Sovereign.Core.Database.Model.JoinRequests.JoinRequestDeclineHistoryEntry")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            joinRequestDeclineHistoryEntry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase = new TableBase("Sovereign.Core.Database.Model.JoinRequests.JoinRequestDeclineHistoryEntry", null, relationalModel);
            var banIdColumnBase = new ColumnBase<ColumnMappingBase>("BanId", "INTEGER", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("BanId", banIdColumnBase);
            var domainColumnBase = new ColumnBase<ColumnMappingBase>("Domain", "TEXT", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("Domain", domainColumnBase);
            var groupIdColumnBase = new ColumnBase<ColumnMappingBase>("GroupId", "INTEGER", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("GroupId", groupIdColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("Id", idColumnBase);
            var timeColumnBase = new ColumnBase<ColumnMappingBase>("Time", "TEXT", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("Time", timeColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Sovereign.Core.Database.Model.JoinRequests.JoinRequestDeclineHistoryEntry", sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase);
            var sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase = new TableMappingBase<ColumnMappingBase>(joinRequestDeclineHistoryEntry, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase, true);
            sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryTableBase.AddTypeMapping(sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase, false);
            defaultTableMappings.Add(sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, joinRequestDeclineHistoryEntry.FindProperty("Id")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)banIdColumnBase, joinRequestDeclineHistoryEntry.FindProperty("BanId")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)domainColumnBase, joinRequestDeclineHistoryEntry.FindProperty("Domain")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)groupIdColumnBase, joinRequestDeclineHistoryEntry.FindProperty("GroupId")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeColumnBase, joinRequestDeclineHistoryEntry.FindProperty("Time")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, joinRequestDeclineHistoryEntry.FindProperty("UserId")!, sovereignCoreDatabaseModelJoinRequestsJoinRequestDeclineHistoryEntryMappingBase);

            var tableMappings = new List<TableMapping>();
            joinRequestDeclineHistoryEntry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var joinRequestDeclineHistoryTable = new Table("JoinRequestDeclineHistory", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("Id", idColumn);
            var banIdColumn = new Column("BanId", "INTEGER", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("BanId", banIdColumn);
            var domainColumn = new Column("Domain", "TEXT", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("Domain", domainColumn);
            var groupIdColumn = new Column("GroupId", "INTEGER", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("GroupId", groupIdColumn);
            var timeColumn = new Column("Time", "TEXT", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("Time", timeColumn);
            var userIdColumn = new Column("UserId", "INTEGER", joinRequestDeclineHistoryTable);
            joinRequestDeclineHistoryTable.Columns.Add("UserId", userIdColumn);
            var pK_JoinRequestDeclineHistory = new UniqueConstraint("PK_JoinRequestDeclineHistory", joinRequestDeclineHistoryTable, new[] { idColumn });
            joinRequestDeclineHistoryTable.PrimaryKey = pK_JoinRequestDeclineHistory;
            var pK_JoinRequestDeclineHistoryUc = RelationalModel.GetKey(this,
                "Sovereign.Core.Database.Model.JoinRequests.JoinRequestDeclineHistoryEntry",
                new[] { "Id" });
            pK_JoinRequestDeclineHistory.MappedKeys.Add(pK_JoinRequestDeclineHistoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_JoinRequestDeclineHistoryUc).Add(pK_JoinRequestDeclineHistory);
            joinRequestDeclineHistoryTable.UniqueConstraints.Add("PK_JoinRequestDeclineHistory", pK_JoinRequestDeclineHistory);
            relationalModel.Tables.Add(("JoinRequestDeclineHistory", null), joinRequestDeclineHistoryTable);
            var joinRequestDeclineHistoryTableMapping = new TableMapping(joinRequestDeclineHistoryEntry, joinRequestDeclineHistoryTable, true);
            joinRequestDeclineHistoryTable.AddTypeMapping(joinRequestDeclineHistoryTableMapping, false);
            tableMappings.Add(joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, joinRequestDeclineHistoryEntry.FindProperty("Id")!, joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(banIdColumn, joinRequestDeclineHistoryEntry.FindProperty("BanId")!, joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(domainColumn, joinRequestDeclineHistoryEntry.FindProperty("Domain")!, joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(groupIdColumn, joinRequestDeclineHistoryEntry.FindProperty("GroupId")!, joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(timeColumn, joinRequestDeclineHistoryEntry.FindProperty("Time")!, joinRequestDeclineHistoryTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, joinRequestDeclineHistoryEntry.FindProperty("UserId")!, joinRequestDeclineHistoryTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
